[1mdiff --git a/backend/data/trains.json b/backend/data/trains.json[m
[1mindex f0e6ba6..f27b85a 100644[m
[1m--- a/backend/data/trains.json[m
[1m+++ b/backend/data/trains.json[m
[36m@@ -1,12 +1,7 @@[m
 [[m
   {[m
[31m-    "trip_id": "Train495Sunday",[m
[31m-    "delay": 2097,[m
[31m-    "delay_formatted": "35 min delay"[m
[31m-  },[m
[31m-  {[m
[31m-    "trip_id": "Train692",[m
[31m-    "delay": 1617,[m
[31m-    "delay_formatted": "27 min delay"[m
[32m+[m[32m    "trip_id": "Train694",[m
[32m+[m[32m    "delay": 963,[m
[32m+[m[32m    "delay_formatted": "16 min delay"[m
   }[m
 ][m
[1mdiff --git a/backend/server_old_stable_without_pushnotifications b/backend/server_old_stable_without_pushnotifications[m
[1mdeleted file mode 100644[m
[1mindex 0949efe..0000000[m
[1m--- a/backend/server_old_stable_without_pushnotifications[m
[1m+++ /dev/null[m
[36m@@ -1,308 +0,0 @@[m
[31m-const express = require('express');[m
[31m-const fs = require('fs-extra');[m
[31m-const path = require('path');[m
[31m-const protobuf = require('protobufjs');[m
[31m-const https = require('https'); // Use https module[m
[31m-const axios = require('axios');[m
[31m-const admzip = require('adm-zip');[m
[31m-const csvtojson = require('csvtojson');  // CSV to JSON converter[m
[31m-[m
[31m-function getLargestTimeStop(entity) {[m
[31m-  let largestTimeStop = null;[m
[31m-  let largestTime = -Infinity;[m
[31m-[m
[31m-  // Loop through each stop_time_update[m
[31m-  entity.trip_update.stop_time_update.forEach(stop => {[m
[31m-    // Handle both arrival and departure times[m
[31m-    const stopTime = stop.departure ? stop.departure.time : stop.arrival.time;[m
[31m-[m
[31m-    if (parseInt(stopTime) > largestTime) {[m
[31m-      largestTime = parseInt(stopTime);[m
[31m-      largestTimeStop = {[m
[31m-        id: entity.id,[m
[31m-        trip_id: entity.trip_update.trip.trip_id,[m
[31m-        delay: stop.departure ? stop.departure.delay : stop.arrival.delay,[m
[31m-      };[m
[31m-    }[m
[31m-  });[m
[31m-[m
[31m-  return largestTimeStop;[m
[31m-}[m
[31m-[m
[31m-async function FormatData(entityData) {[m
[31m-  try {[m
[31m-    if (!entityData) {[m
[31m-      return 0;[m
[31m-    }[m
[31m-[m
[31m-    const largestStops = entityData.map(entity => getLargestTimeStop(entity));[m
[31m-[m
[31m-    // Format the data for the TrainCard component[m
[31m-    const formattedTrainData = largestStops.map(stop => ({[m
[31m-      trip_id: `${stop.trip_id}`,[m
[31m-      delay: isNaN(stop.delay) || stop.delay < 30 ? 'On Time' : `${Math.round(stop.delay / 60)} min delay`,[m
[31m-    }));[m
[31m-[m
[31m-    return formattedTrainData;[m
[31m-  } catch (error) {[m
[31m-    console.error('Error fetching or processing data:', error);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-const app = express();[m
[31m-app.use(express.json());[m
[31m-app.use(require('cors')());[m
[31m-[m
[31m-const DATA_DIR = path.join(__dirname, 'data');[m
[31m-fs.ensureDirSync(DATA_DIR); // Ensure the data directory exists[m
[31m-[m
[31m-// Load JSON data helper[m
[31m-const loadData = async (filename) => {[m
[31m-  const filePath = path.join(DATA_DIR, filename);[m
[31m-  try {[m
[31m-    return await fs.readJson(filePath);[m
[31m-  } catch (err) {[m
[31m-    return []; // Return empty array if file doesn't exist[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-// Save JSON data helper[m
[31m-const saveData = async (filename, data) => {[m
[31m-  const filePath = path.join(DATA_DIR, filename);[m
[31m-  await fs.writeJson(filePath, data, { spaces: 2 });[m
[31m-};[m
[31m-[m
[31m-// Fetch and decode GTFS-RT data using https module[m
[31m-const fetchAndDecodeGTFSRT = async () => {[m
[31m-  try {[m
[31m-    // Fetch the GTFS-RT protobuf schema file[m
[31m-    const schemaUrl = 'https://raw.githubusercontent.com/google/transit/master/gtfs-realtime/proto/gtfs-realtime.proto';[m
[31m-    const schemaText = await fetchText(schemaUrl);[m
[31m-[m
[31m-    // Load the schema dynamically[m
[31m-    const root = protobuf.parse(schemaText, { keepCase: true }).root;[m
[31m-    const FeedMessage = root.lookupType('transit_realtime.FeedMessage');[m
[31m-[m
[31m-    // Fetch the real-time trip updates (GTFS-RT data)[m
[31m-    const feedUrl = 'https://mdotmta-gtfs-rt.s3.amazonaws.com/MARC+RT/marc-tu.pb';[m
[31m-    const buffer = await fetchBinary(feedUrl);[m
[31m-[m
[31m-    // Decode the GTFS-RT data[m
[31m-    const feedMessage = FeedMessage.decode(new Uint8Array(buffer));[m
[31m-    const feedMessageObject = FeedMessage.toObject(feedMessage, {[m
[31m-      enums: String,[m
[31m-      longs: String,[m
[31m-      bytes: String,[m
[31m-    });[m
[31m-[m
[31m-    const formattedData = await FormatData(feedMessageObject.entity);[m
[31m-    // Return the decoded data as a JavaScript object[m
[31m-    return formattedData;[m
[31m-  } catch (error) {[m
[31m-    console.error('Error fetching and decoding GTFS-RT data:', error);[m
[31m-    throw error;[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-// Daily task to fetch ZIP, unzip, and convert CSVs to JSON[m
[31m-const fetchAndProcessDailyData = async () => {[m
[31m-  try {[m
[31m-    const zipUrl = 'https://feeds.mta.maryland.gov/gtfs/marc'; // Change to your URL[m
[31m-    const response = await axios.get(zipUrl, { responseType: 'arraybuffer' });[m
[31m-[m
[31m-    const validTxtFiles = [[m
[31m-        "stop_times.txt",[m
[31m-        "stops.txt",[m
[31m-        "calendar.txt",[m
[31m-        "routes.txt",[m
[31m-        "trips.txt",[m
[31m-        "calendar_dates.txt"[m
[31m-    ];[m
[31m-[m
[31m-    // Unzip the downloaded file[m
[31m-    const zip = new admzip(response.data);[m
[31m-    const outputDir = path.join(DATA_DIR, 'daily_data');[m
[31m-    zip.extractAllTo(outputDir, true); // Extract ZIP contents to directory[m
[31m-[m
[31m-    // Process CSV files in the directory and convert to JSON[m
[31m-    const files = fs.readdirSync(outputDir);[m
[31m-    let dailyData = {};[m
[31m-[m
[31m-    for (const file of files) {[m
[31m-      if (validTxtFiles.includes(file)) {[m
[31m-        const csvFilePath = path.join(outputDir, file);[m
[31m-        const jsonData = await csvtojson().fromFile(csvFilePath);[m
[31m-        dailyData[file.replace('.txt', '')] = jsonData; // Store data in an object with file names as keys[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Perform the joins[m
[31m-    const joinedData = dailyData.trips.map(trip => {[m
[31m-      const stopTimes = dailyData.stop_times.filter(st => st.trip_id === trip.trip_id);[m
[31m-      const stops = stopTimes.map(st => {[m
[31m-        const stop = dailyData.stops.find(s => s.stop_id === st.stop_id);[m
[31m-        return { ...st, ...stop };[m
[31m-      });[m
[31m-  [m
[31m-      // Get the first and last stop times[m
[31m-      const start_time = stops.length > 0 ? stops[0].departure_time : null; // Take departure_time from first stop[m
[31m-      const end_time = stops.length > 0 ? stops[stops.length - 1].arrival_time : null; // Take arrival_time from last stop[m
[31m-[m
[31m-      // Format the short versions of the times[m
[31m-      const start_time_short = formatTimeShort(start_time);[m
[31m-      const end_time_short = formatTimeShort(end_time);[m
[31m-[m
[31m-[m
[31m-      const calendarDates = dailyData.calendar_dates.filter(cd => cd.service_id === trip.service_id);[m
[31m-      const calendar = dailyData.calendar.find(c => c.service_id === trip.service_id);[m
[31m-      const route = dailyData.routes.find(r => r.route_id === trip.route_id);[m
[31m-[m
[31m-      return {[m
[31m-        ...trip,[m
[31m-        ...calendar,[m
[31m-        ...route,[m
[31m-	start_time,[m
[31m-	start_time_short,[m
[31m-	end_time,[m
[31m-	end_time_short,[m
[31m-        service_exceptions: calendarDates,[m
[31m-        stops,[m
[31m-      };[m
[31m-    });[m
[31m-[m
[31m-    // Save the joined data to a JSON file[m
[31m-    await saveData('daily_data.json', joinedData);[m
[31m-    console.log('Daily data processed and saved.');[m
[31m-  } catch (error) {[m
[31m-    console.error('Error processing daily data:', error);[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-// Helper function to convert "HH:MM:SS" to "h:mm AM/PM"[m
[31m-function formatTimeShort(time) {[m
[31m-  if (!time) return null;[m
[31m-[m
[31m-  // Split the time into hours, minutes, and seconds[m
[31m-  const [hours, minutes] = time.split(':');[m
[31m-[m
[31m-  // Convert hours to a number[m
[31m-  let hour = parseInt(hours, 10);[m
[31m-[m
[31m-  // Determine AM/PM[m
[31m-  const ampm = hour >= 12 ? 'PM' : 'AM';[m
[31m-[m
[31m-  // Convert to 12-hour format[m
[31m-  hour = hour % 12 || 12; // Handle midnight (0 becomes 12)[m
[31m-[m
[31m-  // Format the time as "h:mm AM/PM"[m
[31m-  return `${hour}:${minutes} ${ampm}`;[m
[31m-}[m
[31m-[m
[31m-// Helper function to fetch text data (e.g., schema file)[m
[31m-const fetchText = (url) => {[m
[31m-  return new Promise((resolve, reject) => {[m
[31m-    https.get(url, (res) => {[m
[31m-      let data = '';[m
[31m-      res.on('data', (chunk) => {[m
[31m-        data += chunk;[m
[31m-      });[m
[31m-      res.on('end', () => {[m
[31m-        resolve(data);[m
[31m-      });[m
[31m-    }).on('error', (err) => {[m
[31m-      reject(err);[m
[31m-    });[m
[31m-  });[m
[31m-};[m
[31m-[m
[31m-// Helper function to fetch binary data (e.g., GTFS-RT feed)[m
[31m-const fetchBinary = (url) => {[m
[31m-  return new Promise((resolve, reject) => {[m
[31m-    https.get(url, (res) => {[m
[31m-      let data = [];[m
[31m-      res.on('data', (chunk) => {[m
[31m-        data.push(chunk);[m
[31m-      });[m
[31m-      res.on('end', () => {[m
[31m-        resolve(Buffer.concat(data));[m
[31m-      });[m
[31m-    }).on('error', (err) => {[m
[31m-      reject(err);[m
[31m-    });[m
[31m-  });[m
[31m-};[m
[31m-[m
[31m-// Set interval to fetch and save GTFS-RT data every 10 seconds[m
[31m-setInterval(async () => {[m
[31m-  console.log('Fetching and decoding train data...');[m
[31m-  try {[m
[31m-    const decodedData = await fetchAndDecodeGTFSRT();[m
[31m-    await saveData('trains.json', decodedData); // Save the decoded data to file[m
[31m-    console.log('Train data updated and saved');[m
[31m-  } catch (error) {[m
[31m-    console.error('Error fetching and saving train data:', error);[m
[31m-  }[m
[31m-}, 60 * 1000); // Fetch every 60 seconds[m
[31m-[m
[31m-// Schedule daily task (run at midnight or at a specific time each day)[m
[31m-const dailyTaskInterval =  60 * 1000; // Every hour [m
[31m-setInterval(fetchAndProcessDailyData, dailyTaskInterval); // Set the daily interval[m
[31m-[m
[31m-[m
[31m-// Route to serve stored train data[m
[31m-app.get('/trains', async (req, res) => {[m
[31m-  try {[m
[31m-    // Load the data from the JSON files[m
[31m-    const dailyData = await loadData('daily_data.json'); // Array of objects[m
[31m-    const trainData = await loadData('trains.json'); // Array of objects[m
[31m-[m
[31m-    const correctTrainData = Array.isArray(trainData) ? trainData : [];  // Default to empty array if not an array[m
[31m-[m
[31m-    // Perform a left join on trip_id[m
[31m-    const joinedData = dailyData.map(trip => {[m
[31m-      // Find matching train info (if it exists)[m
[31m-      const trainInfo = correctTrainData.find(train => train.trip_id === trip.trip_id);[m
[31m-[m
[31m-      // If trainInfo exists, merge it into the trip object; otherwise, just return the trip object[m
[31m-      const combinedTrip = trainInfo ? { ...trip, ...trainInfo } : trip;[m
[31m-[m
[31m-      // Add completion_percent calculation[m
[31m-      if (combinedTrip.start_time && combinedTrip.end_time && combinedTrip.delay !== undefined) {[m
[31m-        const currentTime = new Date();[m
[31m-        const adjustedStartTime = new Date(combinedTrip.start_time).getTime() + combinedTrip.delay * 1000; // Delay in seconds[m
[31m-        const adjustedEndTime = new Date(combinedTrip.end_time).getTime() + combinedTrip.delay * 1000;[m
[31m-[m
[31m-        // Calculate completion percentage[m
[31m-        let completionPercent = 0;[m
[31m-[m
[31m-        if (currentTime < adjustedStartTime) {[m
[31m-          completionPercent = 0;  // If current time is before start time[m
[31m-        } else if (currentTime > adjustedEndTime) {[m
[31m-          completionPercent = 100;  // If current time is after end time[m
[31m-        } else {[m
[31m-          completionPercent = ((currentTime - adjustedStartTime) / (adjustedEndTime - adjustedStartTime)) * 100;[m
[31m-        }[m
[31m-[m
[31m-        // Clamp the value between 0 and 100[m
[31m-        completionPercent = Math.max(0, Math.min(100, completionPercent));[m
[31m-[m
[31m-        // Attach completion_percent to the trip object[m
[31m-        combinedTrip.completion_percent = completionPercent;[m
[31m-      }[m
[31m-      return combinedTrip;[m
[31m-    });[m
[31m-[m
[31m-[m
[31m-    console.log(JSON.stringify(joinedData[0], null, 2));[m
[31m-[m
[31m-    res.json(joinedData); // Send the joined data as JSON response[m
[31m-  } catch (error) {[m
[31m-    console.error('Error loading or joining train data:', error);[m
[31m-    res.status(500).json({ error: error.message });[m
[31m-  }[m
[31m-});[m
[31m-[m
[31m-[m
[31m-const PORT = 3000;[m
[31m-app.listen(PORT, () => console.log(`Server running on port ${PORT}`));[m
[31m-[m
[1mdiff --git a/frontend/app/index b/frontend/app/index[m
[1mdeleted file mode 100644[m
[1mindex 06f6b44..0000000[m
[1m--- a/frontend/app/index[m
[1m+++ /dev/null[m
[36m@@ -1,316 +0,0 @@[m
[31m-import { ScrollView, Text, View, StyleSheet, TouchableOpacity, RefreshControl } from 'react-native';[m
[31m-import { Card, Title, Provider as PaperProvider, Button } from 'react-native-paper';[m
[31m-import livefetch from '../utils/merge';[m
[31m-import Icon from 'react-native-ico-mingcute-tiny-bold-filled';[m
[31m-import { useRouter } from 'expo-router';[m
[31m-import React, { useState, useEffect } from 'react';[m
[31m-import axios from 'axios';[m
[31m-[m
[31m-export default function Index() {[m
[31m-  const [TrainData, setTrainData] = useState([]);[m
[31m-  const [TrainData2, setTrainData2] = useState([]);[m
[31m-  const router = useRouter();[m
[31m-  const [selectedLine, setSelectedLine] = useState(null);[m
[31m-  const [isRefreshing, setIsRefreshing] = useState(false);[m
[31m-[m
[31m-  async function fetchData() {[m
[31m-    try {[m
[31m-      setIsRefreshing(true); // Start refresh[m
[31m-      const formattedTrainData = await livefetch();[m
[31m-      setTrainData(formattedTrainData);[m
[31m-[m
[31m-      // Fetch data from the server[m
[31m-      //const serverResponse = await axios.get('http://192.168.1.23:3000/trains');[m
[31m-      //const serverTrainData = serverResponse.data;[m
[31m-      //setTrainData2(serverTrainData);[m
[31m-    } catch (error) {[m
[31m-      console.error('Error fetching or processing data:', error);[m
[31m-    } finally {[m
[31m-      setIsRefreshing(false); // End refresh[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Function to get the entity with the largest time in stop_time_update for each entity[m
[31m-  function getLargestTimeStop(entity) {[m
[31m-    let largestTimeStop = null;[m
[31m-    let largestTime = -Infinity;[m
[31m-[m
[31m-    entity.trip_update.stop_time_update.forEach(stop => {[m
[31m-      const stopTime = stop.departure ? stop.departure.time : stop.arrival.time;[m
[31m-[m
[31m-      if (parseInt(stopTime) > largestTime) {[m
[31m-        largestTime = parseInt(stopTime);[m
[31m-        largestTimeStop = {[m
[31m-          id: entity.id,[m
[31m-          trip_id: entity.trip_update.trip.trip_id,[m
[31m-          delay: stop.departure ? stop.departure.delay : stop.arrival.delay,[m
[31m-        };[m
[31m-      }[m
[31m-    });[m
[31m-[m
[31m-    return largestTimeStop;[m
[31m-  }[m
[31m-[m
[31m-  // dynamic styling for each line[m
[31m-  const dynamicStyles = (routeLongName) => {[m
[31m-    let backgroundColor;[m
[31m-    switch (routeLongName) {[m
[31m-      case 'CAMDEN':[m
[31m-        backgroundColor = '#F26F21';[m
[31m-        break;[m
[31m-      case 'PENN':[m
[31m-        backgroundColor = '#004F98';[m
[31m-        break;[m
[31m-      case 'BRUNSWICK':[m
[31m-        backgroundColor = 'gray';[m
[31m-        break;[m
[31m-      default:[m
[31m-        backgroundColor = 'white';[m
[31m-    }[m
[31m-[m
[31m-    return {[m
[31m-      flexDirection: 'row',[m
[31m-      alignItems: 'top',[m
[31m-      paddingRight: 4,[m
[31m-      paddingLeft: 4,[m
[31m-      backgroundColor: backgroundColor,[m
[31m-      justifyContent: 'flex-start'[m
[31m-    };[m
[31m-  };[m
[31m-[m
[31m-  useEffect(() => {    [m
[31m-    fetchData();[m
[31m-  }, []);[m
[31m-[m
[31m-[m
[31m-  // Filtered train data based on selected line[m
[31m-  const filteredTrains = selectedLine[m
[31m-    ? TrainData.filter(train => train.route_long_name.split(' ')[0] === selectedLine)[m
[31m-    : TrainData;[m
[31m-[m
[31m-  const FilterCard = () => ([m
[31m-    <Card style={styles.filterCard}>[m
[31m-      <Card.Content style={{ paddingVertical: 4 }}>[m
[31m-        <Text style={styles.filterTitle}>Line</Text>[m
[31m-        <View style={styles.filterButtons}>[m
[31m-          {['CAMDEN', 'PENN', 'BRUNSWICK'].map(line => ([m
[31m-            <Button[m
[31m-              key={line}[m
[31m-              mode={selectedLine === line ? 'contained' : 'outlined'}[m
[31m-              onPress={() => setSelectedLine(line === selectedLine ? null : line)}[m
[31m-              style={styles.filterButton}[m
[31m-	      labelStyle={{ color: 'black' }}[m
[31m-              theme={{ colors: { primary: '#D3D3D3' } }}[m
[31m-            >[m
[31m-              {line}[m
[31m-            </Button>[m
[31m-          ))}[m
[31m-        </View>[m
[31m-      </Card.Content>[m
[31m-    </Card>[m
[31m-  );[m
[31m-[m
[31m-[m
[31m-  const TrainCard = ({ TrainData }) => {[m
[31m-    const [trainPosition, setTrainPosition] = useState(TrainData.completionPercentage);[m
[31m-    const [modifiedTrainData, setModifiedTrainData] = useState(TrainData);[m
[31m-    [m
[31m-    useEffect(() => {[m
[31m-      if (TrainData.completionPercentage < 2) {[m
[31m-        setTrainPosition(2);[m
[31m-      } else if (TrainData.completionPercentage > 92) {[m
[31m-        setTrainPosition(92);[m
[31m-      } else {[m
[31m-        setTrainPosition(TrainData.completionPercentage || 0);[m
[31m-      }[m
[31m-    }, [TrainData.completionPercentage]);[m
[31m-[m
[31m-    useEffect(() => {[m
[31m-      const capitalizeFirstLetter = (str: string) =>[m
[31m-        str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();[m
[31m-[m
[31m-      const updatedData = {[m
[31m-        ...TrainData,[m
[31m-        route_long_name: TrainData.route_long_name.split(' ')[0],[m
[31m-        trip_id: TrainData.trip_id.replace(/[^0-9]/g, ''),[m
[31m-        trip_headsign: capitalizeFirstLetter(TrainData.trip_headsign) // Apply capitalization[m
[31m-      };[m
[31m-      setModifiedTrainData(updatedData);[m
[31m-    }, [TrainData]);[m
[31m-[m
[31m-    const handleCardPress = () => {[m
[31m-      const serializedData = JSON.stringify(TrainData);[m
[31m-      // Navigate to the new screen with `trip_id` in the URL[m
[31m-      router.push(`/trainDetails?trainData=${encodeURIComponent(serializedData)}`);[m
[31m-    };[m
[31m-    [m
[31m-    return ([m
[31m-      <TouchableOpacity onPress={handleCardPress} activeOpacity ={1}>[m
[31m-        <Card style={styles.card}>[m
[31m-          <Card.Content>[m
[31m-            <View style={styles.cardContainer}>[m
[31m-              <View style={styles.toprowcontainer}>[m
[31m-                <View style={dynamicStyles(modifiedTrainData.route_long_name)}>[m
[31m-                  <Text style={styles.label}>{modifiedTrainData.route_long_name}</Text>[m
[31m-                </View>[m
[31m-                <Text style={styles.topLeftText}>{modifiedTrainData.trip_id}</Text>[m
[31m-                <Text style={styles.DirectionText}>Direction: {modifiedTrainData.trip_headsign}</Text>[m
[31m-                <Text style={styles.topRightText}>{TrainData.delay}</Text>[m
[31m-              </View>[m
[31m-              <View style={styles.cardContent}>[m
[31m-                <Title style={styles.ddtitle}></Title>[m
[31m-                <View style={styles.lineContainer}>[m
[31m-                  <View style={styles.line}></View>[m
[31m-                  <Icon[m
[31m-                    name="train"[m
[31m-		    height = "26" width = "26"[m
[31m-                    style={[styles.trainIcon, { left: `${trainPosition}%`, top: -22 }]}[m
[31m-                  />[m
[31m-                  <View style={styles.dotLeft}></View>[m
[31m-                  <View style={styles.dotRight}></View>[m
[31m-                </View>[m
[31m-              </View>[m
[31m-              <View style={{ flexDirection: 'row', justifyContent: 'space-between', width: '99%' }}>[m
[31m-                <Text style={{ fontWeight: 'bold' }}>{TrainData.start_time_short}</Text>[m
[31m-                <Text style={{ fontWeight: 'bold' }}>{TrainData.end_time_short}</Text>[m
[31m-              </View>[m
[31m-            </View>[m
[31m-          </Card.Content>[m
[31m-        </Card>[m
[31m-      </TouchableOpacity>[m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  const TrainList = ({ trains }) => ([m
[31m-    <ScrollView style={{ padding: 10 }}>[m
[31m-      {trains.map((train, index) => ([m
[31m-        <TrainCard key={index} TrainData={train} />[m
[31m-      ))}[m
[31m-    </ScrollView>[m
[31m-  );[m
[31m-[m
[31m-  return ([m
[31m-[m
[31m-    <PaperProvider>[m
[31m-      <View [m
[31m-	style={{ [m
[31m-	  flex: 1,[m
[31m-          justifyContent: 'center',[m
[31m-          alignItems: 'center',[m
[31m-          padding: 10,[m
[31m-	}}>[m
[31m-        {/* Background at the top */}[m
[31m-        <View style={styles.backgroundTop}></View>[m
[31m-        <FilterCard />[m
[31m-        <ScrollView[m
[31m-	refreshControl={<RefreshControl refreshing={isRefreshing} onRefresh={fetchData} />}[m
[31m-	>[m
[31m-          {filteredTrains.map((train, index) => ([m
[31m-            <TrainCard key={index} TrainData={train} />[m
[31m-          ))}[m
[31m-        </ScrollView>[m
[31m-      </View>[m
[31m-    </PaperProvider>[m
[31m-[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-const styles = StyleSheet.create({[m
[31m-  card: {[m
[31m-    marginBottom: 10,[m
[31m-    width: '100%',[m
[31m-    backgroundColor: 'white',[m
[31m-  },[m
[31m-  cardContainer: {[m
[31m-  },[m
[31m-  cardContent: {[m
[31m-    marginTop: 0,[m
[31m-    marginBottom: -20,[m
[31m-  },[m
[31m-  topLeftText: {[m
[31m-    alignItems: 'center',[m
[31m-    marginLeft:4,[m
[31m-    flexDirection: 'row',[m
[31m-    left: 0,[m
[31m-    fontSize: 16,[m
[31m-    fontWeight: 'bold',[m
[31m-  },[m
[31m-  topRightText: {[m
[31m-    position: 'absolute',[m
[31m-    right: 0,[m
[31m-    fontSize: 14,[m
[31m-    fontWeight: 'bold',[m
[31m-  },[m
[31m-  DirectionText: {[m
[31m-    [m
[31m-    flexDirection: 'row',[m
[31m-    fontSize: 14,[m
[31m-    paddingLeft: 30,[m
[31m-  },[m
[31m-  lineContainer: {[m
[31m-    justifyContent: 'center',[m
[31m-    width: '92%',[m
[31m-    alignSelf: 'center',[m
[31m-  },[m
[31m-  line: {[m
[31m-    flex: 1,[m
[31m-    height: 2,[m
[31m-    backgroundColor: 'black',[m
[31m-    marginTop: 3,[m
[31m-  },[m
[31m-  trainIcon: {[m
[31m-  },[m
[31m-  dotLeft: {[m
[31m-    position: 'absolute',[m
[31m-    left: 0,[m
[31m-    top: 0,[m
[31m-    width: 9,[m
[31m-    height: 9,[m
[31m-    backgroundColor: 'black',[m
[31m-    borderRadius: 4,[m
[31m-  },[m
[31m-  dotRight: {[m
[31m-    position: 'absolute',[m
[31m-    right: 0,[m
[31m-    top: 0,[m
[31m-    width: 9,[m
[31m-    height: 9,[m
[31m-    backgroundColor: 'black',[m
[31m-    borderRadius: 4,[m
[31m-  },[m
[31m-  label: {[m
[31m-    fontSize: 14,[m
[31m-    fontWeight: 'bold',[m
[31m-    color: '#ffffff',[m
[31m-  },[m
[31m-  toprowcontainer: {[m
[31m-    flex: 1,[m
[31m-    flexDirection: 'row',[m
[31m-  },[m
[31m-  filterCard: {[m
[31m-    marginBottom: 10,[m
[31m-    paddingVertical: 6,[m
[31m-    backgroundColor: 'white',[m
[31m-  },[m
[31m-  filterTitle: {[m
[31m-    fontSize: 16,[m
[31m-    fontWeight: 'bold',[m
[31m-    marginBottom: 8,[m
[31m-  },[m
[31m-  filterButtons: {  [m
[31m-    flexDirection: 'row',[m
[31m-    justifyContent: 'space-around',[m
[31m-  },[m
[31m-  filterButton: {[m
[31m-    marginHorizontal: 5,[m
[31m-  },[m
[31m-  backgroundTop: {[m
[31m-    position: 'absolute',[m
[31m-    top: 0,[m
[31m-    width: '110%',[m
[31m-    height: '6%',[m
[31m-    backgroundColor: '#004F98',  // Adjust color as needed[m
[31m-    margin: -10,[m
[31m-  },[m
[31m-});[m
[31m-[m
[1mdiff --git a/frontend/app/index.tsx b/frontend/app/index.tsx[m
[1mindex 7afd0d6..326891c 100644[m
[1m--- a/frontend/app/index.tsx[m
[1m+++ b/frontend/app/index.tsx[m
[36m@@ -1,286 +1,114 @@[m
[31m-import { ScrollView, Text, View, StyleSheet, TouchableOpacity, RefreshControl } from 'react-native';[m
[31m-import { Card, Title, Provider as PaperProvider, Button } from 'react-native-paper';[m
[31m-import Icon from 'react-native-ico-mingcute-tiny-bold-filled';[m
[31m-import { useRouter } from 'expo-router';[m
[31m-import React, { useState, useEffect } from 'react';[m
[31m-import axios from 'axios';[m
[32m+[m[32mimport { Tabs } from 'expo-router';[m
[32m+[m[32mimport React, { useEffect } from 'react';[m
[32m+[m[32mimport { Platform, View, Text, Image, useColorScheme, StatusBar } from 'react-native';[m
[32m+[m[32mimport { SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';[m
[32m+[m[32mimport Icon from 'react-native-vector-icons/Ionicons'; // For train icons[m
[32m+[m[32mimport * as Notifications from 'expo-notifications';[m
 [m
[31m-export default function Index() {[m
[31m-  const [TrainData, setTrainData] = useState([]);[m
[31m-  const router = useRouter();[m
[31m-  const [selectedLine, setSelectedLine] = useState(null);[m
[31m-  const [isRefreshing, setIsRefreshing] = useState(false);[m
[31m-[m
[31m-  async function fetchData() {[m
[31m-    try {[m
[31m-      setIsRefreshing(true); // Start refresh[m
[31m-      const serverResponse = await axios.get('http://192.168.1.19:3000/trains');[m
[31m-      const serverTrainData = serverResponse.data;[m
[31m-      setTrainData(serverTrainData);[m
[31m-      console.log(JSON.stringify(serverTrainData, null, 2));[m
[31m-    } catch (error) {[m
[31m-      console.error('Error fetching or processing data:', error);[m
[31m-    } finally {[m
[31m-      setIsRefreshing(false); // End refresh[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-[m
[31m-  // Dynamic styling for each line[m
[31m-  const dynamicStyles = (routeLongName) => {[m
[31m-    let backgroundColor;[m
[31m-    switch (routeLongName) {[m
[31m-      case 'CAMDEN':[m
[31m-        backgroundColor = '#F26F21';[m
[31m-        break;[m
[31m-      case 'PENN':[m
[31m-        backgroundColor = '#004F98';[m
[31m-        break;[m
[31m-      case 'BRUNSWICK':[m
[31m-        backgroundColor = 'gray';[m
[31m-        break;[m
[31m-      default:[m
[31m-        backgroundColor = 'white';[m
[31m-    }[m
[31m-[m
[31m-    return {[m
[31m-      flexDirection: 'row',[m
[31m-      alignItems: 'top',[m
[31m-      paddingRight: 4,[m
[31m-      paddingLeft: 4,[m
[31m-      backgroundColor: backgroundColor,[m
[31m-      justifyContent: 'flex-start'[m
[31m-    };[m
[31m-  };[m
[32m+[m[32mexport default function TabLayout() {[m
[32m+[m[32m  const colorScheme = useColorScheme(); // Get the system's color scheme (light or dark)[m
 [m
[32m+[m[32m  // Step 1: Request permissions and get push token[m
   useEffect(() => {[m
[31m-    fetchData();[m
[31m-  }, []);[m
[32m+[m[32m    const registerPushNotifications = async () => {[m
[32m+[m[32m      const { status: existingStatus } = await Notifications.getPermissionsAsync();[m
[32m+[m[32m      let finalStatus = existingStatus;[m
 [m
[31m-  // Filtered train data based on selected line[m
[31m-  const filteredTrains = selectedLine[m
[31m-    ? TrainData.filter(train => train.route_long_name.split(' ')[0] === selectedLine)[m
[31m-    : TrainData;[m
[31m-[m
[31m-  const FilterCard = () => ([m
[31m-    <Card style={styles.filterCard}>[m
[31m-      <Card.Content style={{ paddingVertical: 4 }}>[m
[31m-        <Text style={styles.filterTitle}>Line</Text>[m
[31m-        <View style={styles.filterButtons}>[m
[31m-          {['CAMDEN', 'PENN', 'BRUNSWICK'].map(line => ([m
[31m-            <Button[m
[31m-              key={line}[m
[31m-              mode={selectedLine === line ? 'contained' : 'outlined'}[m
[31m-              onPress={() => setSelectedLine(line === selectedLine ? null : line)}[m
[31m-              style={styles.filterButton}[m
[31m-              labelStyle={{ color: 'black' }}[m
[31m-              theme={{ colors: { primary: '#D3D3D3' } }}[m
[31m-            >[m
[31m-              {line}[m
[31m-            </Button>[m
[31m-          ))}[m
[31m-        </View>[m
[31m-      </Card.Content>[m
[31m-    </Card>[m
[31m-  );[m
[31m-[m
[31m-  const TrainCard = ({ TrainData }) => {[m
[31m-    const [trainPosition, setTrainPosition] = useState(TrainData.completionPercentage);[m
[31m-    const [modifiedTrainData, setModifiedTrainData] = useState(TrainData);[m
[31m-[m
[31m-    useEffect(() => {[m
[31m-      if (TrainData.completionPercentage < 2) {[m
[31m-        setTrainPosition(2);[m
[31m-      } else if (TrainData.completionPercentage > 92) {[m
[31m-        setTrainPosition(92);[m
[31m-      } else {[m
[31m-        setTrainPosition(TrainData.completionPercentage || 0);[m
[32m+[m[32m      if (existingStatus !== 'granted') {[m
[32m+[m[32m        const { status } = await Notifications.requestPermissionsAsync();[m
[32m+[m[32m        finalStatus = status;[m
       }[m
[31m-    }, [TrainData.completionPercentage]);[m
 [m
[31m-    useEffect(() => {[m
[31m-      const capitalizeFirstLetter = (str) =>[m
[31m-        str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();[m
[32m+[m[32m      if (finalStatus !== 'granted') {[m
[32m+[m[32m        alert('Failed to get push token for push notification!');[m
[32m+[m[32m        return;[m
[32m+[m[32m      }[m
 [m
[31m-      const updatedData = {[m
[31m-        ...TrainData,[m
[31m-        route_long_name: TrainData.route_long_name.split(' ')[0],[m
[31m-        trip_id: TrainData.trip_id.replace(/[^0-9]/g, ''),[m
[31m-        trip_headsign: capitalizeFirstLetter(TrainData.trip_headsign) // Apply capitalization[m
[31m-      };[m
[31m-      setModifiedTrainData(updatedData);[m
[31m-    }, [TrainData]);[m
[32m+[m[32m      const token = (await Notifications.getExpoPushTokenAsync()).data;[m
[32m+[m[32m      console.log('Push Token:', token);[m
 [m
[31m-    const handleCardPress = () => {[m
[31m-      const serializedData = JSON.stringify(TrainData);[m
[31m-      // Navigate to the new screen with `trip_id` in the URL[m
[31m-      router.push(`/trainDetails?trainData=${encodeURIComponent(serializedData)}`);[m
[32m+[m[32m      // Optionally, send the token to your server here[m
[32m+[m[32m      // await fetch('http://your-server-url/save-token', {[m
[32m+[m[32m      //   method: 'POST',[m
[32m+[m[32m      //   headers: { 'Content-Type': 'application/json' },[m
[32m+[m[32m      //   body: JSON.stringify({ push_token: token }),[m
[32m+[m[32m      // });[m
     };[m
 [m
[31m-    return ([m
[31m-      <TouchableOpacity onPress={handleCardPress} activeOpacity={1}>[m
[31m-        <Card style={styles.card}>[m
[31m-          <Card.Content>[m
[31m-            <View style={styles.cardContainer}>[m
[31m-              <View style={styles.toprowcontainer}>[m
[31m-                <View style={dynamicStyles(modifiedTrainData.route_long_name)}>[m
[31m-                  <Text style={styles.label}>{modifiedTrainData.route_long_name}</Text>[m
[31m-                </View>[m
[31m-                <Text style={styles.topLeftText}>{modifiedTrainData.trip_id}</Text>[m
[31m-                <Text style={styles.DirectionText}>Direction: {modifiedTrainData.trip_headsign}</Text>[m
[31m-                <Text style={styles.topRightText}>{TrainData.delay_formatted}</Text>[m
[31m-              </View>[m
[31m-              <View style={styles.cardContent}>[m
[31m-                <Title style={styles.ddtitle}></Title>[m
[31m-                <View style={styles.lineContainer}>[m
[31m-                  <View style={styles.line}></View>[m
[31m-                  <Icon[m
[31m-                    name="train"[m
[31m-                    height="26"[m
[31m-                    width="26"[m
[31m-                    style={[styles.trainIcon, { left: `${trainPosition}%`, top: -22 }]}[m
[31m-                  />[m
[31m-                  <View style={styles.dotLeft}></View>[m
[31m-                  <View style={styles.dotRight}></View>[m
[31m-                </View>[m
[31m-              </View>[m
[31m-              <View style={{ flexDirection: 'row', justifyContent: 'space-between', width: '99%' }}>[m
[31m-                <Text style={{ fontWeight: 'bold' }}>{TrainData.start_time_short}</Text>[m
[31m-                <Text style={{ fontWeight: 'bold' }}>{TrainData.end_time_short}</Text>[m
[31m-              </View>[m
[31m-            </View>[m
[31m-          </Card.Content>[m
[31m-        </Card>[m
[31m-      </TouchableOpacity>[m
[31m-    );[m
[31m-  };[m
[32m+[m[32m    registerPushNotifications();[m
[32m+[m[32m  }, []);[m
 [m
[31m-  const TrainList = ({ trains }) => ([m
[31m-    <ScrollView style={{ padding: 10 }}>[m
[31m-      {trains.map((train, index) => ([m
[31m-        <TrainCard key={index} TrainData={train} />[m
[31m-      ))}[m
[31m-    </ScrollView>[m
[31m-  );[m
[32m+[m[32m  // Step 4: Handle incoming notifications[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    // Set up the notification handler[m
[32m+[m[32m    Notifications.setNotificationHandler({[m
[32m+[m[32m      handleNotification: async () => ({[m
[32m+[m[32m        shouldShowAlert: true,[m
[32m+[m[32m        shouldPlaySound: true,[m
[32m+[m[32m        shouldSetBadge: true,[m
[32m+[m[32m      }),[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // Listen for incoming notifications[m
[32m+[m[32m    const subscription = Notifications.addNotificationReceivedListener(notification => {[m
[32m+[m[32m      console.log('Notification received:', notification);[m
[32m+[m[32m      // You can show an alert or navigate to a specific screen here[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // Clean up the listener[m
[32m+[m[32m    return () => subscription.remove();[m
[32m+[m[32m  }, []);[m
 [m
[31m-  return ([m
[31m-    <PaperProvider>[m
[32m+[m[32m  const BasicHeader = () => {[m
[32m+[m[32m    return ([m
       <View[m
         style={{[m
[31m-          flex: 1,[m
[31m-          justifyContent: 'center',[m
[32m+[m[32m          backgroundColor: '#004F98',[m
[32m+[m[32m          height: '14%',[m
           alignItems: 'center',[m
[31m-          padding: 10,[m
[31m-        }}>[m
[31m-        {/* Background at the top */}[m
[31m-        <View style={styles.backgroundTop}></View>[m
[31m-        <FilterCard />[m
[31m-        <ScrollView[m
[31m-          refreshControl={<RefreshControl refreshing={isRefreshing} onRefresh={fetchData} />}[m
[31m-        >[m
[31m-          {filteredTrains.map((train, index) => ([m
[31m-            <TrainCard key={index} TrainData={train} />[m
[31m-          ))}[m
[31m-        </ScrollView>[m
[32m+[m[32m        }}[m
[32m+[m[32m      >[m
[32m+[m[32m        <SafeAreaView style={{ flex: 1 }}>[m
[32m+[m[32m          <Image[m
[32m+[m[32m            source={require('@/assets/images/marc_white.png')}[m
[32m+[m[32m            style={{ width: 200 }}[m
[32m+[m[32m            resizeMode="contain"[m
[32m+[m[32m          />[m
[32m+[m[32m        </SafeAreaView>[m
       </View>[m
[31m-    </PaperProvider>[m
[32m+[m[32m    );[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <>[m
[32m+[m[32m      <StatusBar translucent backgroundColor="transparent" />[m
[32m+[m[32m      <BasicHeader />[m
[32m+[m[32m      <Tabs[m
[32m+[m[32m        screenOptions={({ route }) => ({[m
[32m+[m[32m          tabBarActiveTintColor: colorScheme === 'dark' ? '#ffffff' : '#000000', // Set active tab color[m
[32m+[m[32m          tabBarInactiveTintColor: colorScheme === 'dark' ? '#d3d3d3' : '#d3d3d3', // Set inactive tab color[m
[32m+[m[32m          headerShown: false,[m
[32m+[m[32m          tabBarStyle: {[m
[32m+[m[32m            backgroundColor: '#000000', // Dark gray background color for the tab bar[m
[32m+[m[32m            height: 0, //temp hide tabbar[m
[32m+[m[32m          },[m
[32m+[m[32m        })}[m
[32m+[m[32m      >[m
[32m+[m[32m        <Tabs.Screen[m
[32m+[m[32m          name="index"[m
[32m+[m[32m          options={{[m
[32m+[m[32m            title: 'Status',[m
[32m+[m[32m            tabBarIcon: ({ color }) => <Icon name="train-outline" size={24} color={color} />,[m
[32m+[m[32m          }}[m
[32m+[m[32m        />[m
[32m+[m[32m        <Tabs.Screen[m
[32m+[m[32m          name="schedule"[m
[32m+[m[32m          options={{[m
[32m+[m[32m            title: 'Schedule',[m
[32m+[m[32m            tabBarIcon: ({ color }) => <Icon name="calendar-clear-outline" size={24} color={color} />, // Replace icon with train icon[m
[32m+[m[32m          }}[m
[32m+[m[32m        />[m
[32m+[m[32m      </Tabs>[m
[32m+[m[32m    </>[m
   );[m
 }[m
[31m-[m
[31m-const styles = StyleSheet.create({[m
[31m-  card: {[m
[31m-    marginBottom: 10,[m
[31m-    width: '100%',[m
[31m-    backgroundColor: 'white',[m
[31m-  },[m
[31m-  cardContainer: {[m
[31m-  },[m
[31m-  cardContent: {[m
[31m-    marginTop: 0,[m
[31m-    marginBottom: -20,[m
[31m-  },[m
[31m-  topLeftText: {[m
[31m-    alignItems: 'center',[m
[31m-    marginLeft: 4,[m
[31m-    flexDirection: 'row',[m
[31m-    left: 0,[m
[31m-    fontSize: 16,[m
[31m-    fontWeight: 'bold',[m
[31m-  },[m
[31m-  topRightText: {[m
[31m-    position: 'absolute',[m
[31m-    right: 0,[m
[31m-    fontSize: 14,[m
[31m-    fontWeight: 'bold',[m
[31m-  },[m
[31m-  DirectionText: {[m
[31m-    flexDirection: 'row',[m
[31m-    fontSize: 14,[m
[31m-    paddingLeft: 30,[m
[31m-  },[m
[31m-  lineContainer: {[m
[31m-    justifyContent: 'center',[m
[31m-    width: '92%',[m
[31m-    alignSelf: 'center',[m
[31m-  },[m
[31m-  line: {[m
[31m-    flex: 1,[m
[31m-    height: 2,[m
[31m-    backgroundColor: 'black',[m
[31m-    marginTop: 3,[m
[31m-  },[m
[31m-  trainIcon: {[m
[31m-  },[m
[31m-  dotLeft: {[m
[31m-    position: 'absolute',[m
[31m-    left: 0,[m
[31m-    top: 0,[m
[31m-    width: 9,[m
[31m-    height: 9,[m
[31m-    backgroundColor: 'black',[m
[31m-    borderRadius: 4,[m
[31m-  },[m
[31m-  dotRight: {[m
[31m-    position: 'absolute',[m
[31m-    right: 0,[m
[31m-    top: 0,[m
[31m-    width: 9,[m
[31m-    height: 9,[m
[31m-    backgroundColor: 'black',[m
[31m-    borderRadius: 4,[m
[31m-  },[m
[31m-  label: {[m
[31m-    fontSize: 14,[m
[31m-    fontWeight: 'bold',[m
[31m-    color: '#ffffff',[m
[31m-  },[m
[31m-  toprowcontainer: {[m
[31m-    flex: 1,[m
[31m-    flexDirection: 'row',[m
[31m-  },[m
[31m-  filterCard: {[m
[31m-    marginBottom: 10,[m
[31m-    paddingVertical: 6,[m
[31m-    backgroundColor: 'white',[m
[31m-  },[m
[31m-  filterTitle: {[m
[31m-    fontSize: 16,[m
[31m-    fontWeight: 'bold',[m
[31m-    marginBottom: 8,[m
[31m-  },[m
[31m-  filterButtons: {[m
[31m-    flexDirection: 'row',[m
[31m-    justifyContent: 'space-around',[m
[31m-  },[m
[31m-  filterButton: {[m
[31m-    marginHorizontal: 5,[m
[31m-  },[m
[31m-  backgroundTop: {[m
[31m-    position: 'absolute',[m
[31m-    top: 0,[m
[31m-    width: '110%',[m
[31m-    height: '6%',[m
[31m-    backgroundColor: '#004F98',  // Adjust color as needed[m
[31m-    margin: -10,[m
[31m-  },[m
[31m-});[m
[1mdiff --git a/frontend/app/trainDetails.tsx b/frontend/app/trainDetails.tsx[m
[1mindex 7b4791f..8de3263 100644[m
[1m--- a/frontend/app/trainDetails.tsx[m
[1m+++ b/frontend/app/trainDetails.tsx[m
[36m@@ -1,40 +1,53 @@[m
 import React, { useEffect, useState } from 'react';[m
[31m-import { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';[m
[32m+[m[32mimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, Button, Alert } from 'react-native';[m
 import { useLocalSearchParams } from 'expo-router';[m
 import { useNavigation } from '@react-navigation/native';[m
 import { Dimensions } from 'react-native';[m
[32m+[m[32mimport * as Notifications from 'expo-notifications';[m
[32m+[m[32mimport * as Permissions from 'expo-permissions';[m
 [m
 // Function to format time from HH:MM:SS to H:MM[m
 function formatTime(timeString) {[m
[31m-  // Ensure the timeString is in HH:MM:SS format[m
   if (typeof timeString !== 'string' || timeString.split(':').length !== 3) {[m
[31m-    console.error("Invalid time format:", timeString); // Log invalid format for debugging[m
[31m-    return null; // Return null for invalid time format[m
[32m+[m[32m    console.error("Invalid time format:", timeString);[m
[32m+[m[32m    return null;[m
   }[m
[31m-  const [hours, minutes] = timeString.split(':'); // Split time string into hours and minutes[m
[32m+[m[32m  const [hours, minutes] = timeString.split(':');[m
   let hour = parseInt(hours);[m
   const period = hour >= 12 ? 'PM' : 'AM';[m
   hour = hour % 12 || 12;[m
[31m-  return `${hour}:${minutes} ${period}`; // Remove leading zeros from hours and keep minutes[m
[32m+[m[32m  return `${hour}:${minutes} ${period}`;[m
 }[m
 [m
 function cleanStopName(name) {[m
[31m-  // Define substrings to remove[m
   const substringsToRemove = ['MARC', ' nb', ' sb', ' wb', ' eb'];[m
[31m-[m
[31m-  // Remove each substring from the name[m
   let cleanedName = name;[m
   substringsToRemove.forEach(substring => {[m
[31m-    cleanedName = cleanedName.replace(new RegExp(substring, 'gi'), '').trim(); // 'gi' for case-insensitive global match[m
[32m+[m[32m    cleanedName = cleanedName.replace(new RegExp(substring, 'gi'), '').trim();[m
   });[m
[31m-[m
   return cleanedName;[m
 }[m
 [m
[32m+[m[32masync function registerForPushNotificationsAsync() {[m
[32m+[m[32m  const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);[m
[32m+[m[32m  let finalStatus = existingStatus;[m
[32m+[m[32m  if (existingStatus !== 'granted') {[m
[32m+[m[32m    const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);[m
[32m+[m[32m    finalStatus = status;[m
[32m+[m[32m  }[m
[32m+[m[32m  if (finalStatus !== 'granted') {[m
[32m+[m[32m    Alert.alert('Push notifications permission is required.');[m
[32m+[m[32m    return null;[m
[32m+[m[32m  }[m
[32m+[m[32m  const token = (await Notifications.getExpoPushTokenAsync()).data;[m
[32m+[m[32m  return token;[m
[32m+[m[32m}[m
[32m+[m
 const TrainDetails = () => {[m
   const navigation = useNavigation();[m
   const { trainData } = useLocalSearchParams();[m
   const [parsedTrainData, setParsedTrainData] = useState(null);[m
[32m+[m[32m  const [isSubscribed, setIsSubscribed] = useState(false);[m
 [m
   useEffect(() => {[m
     if (trainData) {[m
[36m@@ -48,6 +61,48 @@[m [mconst TrainDetails = () => {[m
     }[m
   }, [trainData]);[m
 [m
[32m+[m[32m  const handleSubscribe = async () => {[m
[32m+[m[32m    const pushToken = await registerForPushNotificationsAsync();[m
[32m+[m[32m    if (!pushToken) return;[m
[32m+[m[32m    try {[m
[32m+[m[32m      const response = await fetch('http://your-server-url/subscribe', {[m
[32m+[m[32m        method: 'POST',[m
[32m+[m[32m        headers: { 'Content-Type': 'application/json' },[m
[32m+[m[32m        body: JSON.stringify({ train_id: parsedTrainData.train_id, push_token: pushToken }),[m
[32m+[m[32m      });[m
[32m+[m[32m      if (response.ok) {[m
[32m+[m[32m        setIsSubscribed(true);[m
[32m+[m[32m        Alert.alert('Subscribed to notifications for this train!');[m
[32m+[m[32m      } else {[m
[32m+[m[32m        Alert.alert('Failed to subscribe. Please try again.');[m
[32m+[m[32m      }[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      console.error('Error subscribing:', error);[m
[32m+[m[32m      Alert.alert('Failed to subscribe. Please try again.');[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const handleUnsubscribe = async () => {[m
[32m+[m[32m    const pushToken = await registerForPushNotificationsAsync();[m
[32m+[m[32m    if (!pushToken) return;[m
[32m+[m[32m    try {[m
[32m+[m[32m      const response = await fetch('http://your-server-url/unsubscribe', {[m
[32m+[m[32m        method: 'POST',[m
[32m+[m[32m        headers: { 'Content-Type': 'application/json' },[m
[32m+[m[32m        body: JSON.stringify({ train_id: parsedTrainData.train_id, push_token: pushToken }),[m
[32m+[m[32m      });[m
[32m+[m[32m      if (response.ok) {[m
[32m+[m[32m        setIsSubscribed(false);[m
[32m+[m[32m        Alert.alert('Unsubscribed from notifications for this train.');[m
[32m+[m[32m      } else {[m
[32m+[m[32m        Alert.alert('Failed to unsubscribe. Please try again.');[m
[32m+[m[32m      }[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      console.error('Error unsubscribing:', error);[m
[32m+[m[32m      Alert.alert('Failed to unsubscribe. Please try again.');[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
[32m+[m
   if (!parsedTrainData) {[m
     return ([m
       <View style={styles.center}>[m
[36m@@ -71,10 +126,12 @@[m [mconst TrainDetails = () => {[m
         ))}[m
       </View>[m
 [m
[31m-      {/* Back Button at the Bottom */}[m
[31m-      <TouchableOpacity [m
[31m-        style={styles.backButton} [m
[31m-        onPress={() => navigation.goBack()}>[m
[32m+[m[32m      <Button[m
[32m+[m[32m        title={isSubscribed ? 'Unsubscribe' : 'Subscribe to Notifications'}[m
[32m+[m[32m        onPress={isSubscribed ? handleUnsubscribe : handleSubscribe}[m
[32m+[m[32m      />[m
[32m+[m
[32m+[m[32m      <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>[m
         <Text style={styles.backText}>Go Back</Text>[m
       </TouchableOpacity>[m
     </ScrollView>[m
[36m@@ -105,13 +162,11 @@[m [mconst styles = StyleSheet.create({[m
   timeline: {[m
     borderLeftWidth: 2,[m
     borderLeftColor: '#888',[m
[31m-    position: 'relative',[m
   },[m
   timelineItem: {[m
     flexDirection: 'row',[m
     alignItems: 'center',[m
     marginBottom: 16,[m
[31m-    position: 'relative',[m
   },[m
   dot: {[m
     width: 12,[m
[36m@@ -137,9 +192,7 @@[m [mconst styles = StyleSheet.create({[m
   },[m
   backButton: {[m
     width: width * 0.25,[m
[31m-    marginLeft: -60,[m
     paddingVertical: 10,[m
[31m-    paddingHorizontal: 20,[m
     backgroundColor: '#FF8000',[m
     borderRadius: 5,[m
     alignSelf: 'center',[m
[1mdiff --git a/frontend/package-lock.json b/frontend/package-lock.json[m
[1mindex 9682424..2a702b4 100644[m
[1m--- a/frontend/package-lock.json[m
[1m+++ b/frontend/package-lock.json[m
[36m@@ -21,6 +21,8 @@[m
         "expo-haptics": "~14.0.0",[m
         "expo-image": "~2.0.4",[m
         "expo-linking": "~7.0.3",[m
[32m+[m[32m        "expo-notifications": "^0.29.13",[m
[32m+[m[32m        "expo-permissions": "^14.4.0",[m
         "expo-router": "^4.0.17",[m
         "expo-splash-screen": "^0.29.21",[m
         "expo-status-bar": "~2.0.0",[m
[36m@@ -2381,15 +2383,14 @@[m
       }[m
     },[m
     "node_modules/@expo/config": {[m
[31m-      "version": "10.0.8",[m
[31m-      "resolved": "https://registry.npmjs.org/@expo/config/-/config-10.0.8.tgz",[m
[31m-      "integrity": "sha512-RaKwi8e6PbkMilRexdsxObLMdQwxhY6mlgel+l/eW+IfIw8HEydSU0ERlzYUjlGJxHLHUXe4rC2vw8FEvaowyQ==",[m
[31m-      "license": "MIT",[m
[32m+[m[32m      "version": "10.0.10",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@expo/config/-/config-10.0.10.tgz",[m
[32m+[m[32m      "integrity": "sha512-wI9/iam3Irk99ADGM/FyD7YrrEibIZXR4huSZiU5zt9o3dASOKhqepiNJex4YPiktLfKhYrpSEJtwno1g0SrgA==",[m
       "dependencies": {[m
         "@babel/code-frame": "~7.10.4",[m
[31m-        "@expo/config-plugins": "~9.0.14",[m
[31m-        "@expo/config-types": "^52.0.3",[m
[31m-        "@expo/json-file": "^9.0.1",[m
[32m+[m[32m        "@expo/config-plugins": "~9.0.15",[m
[32m+[m[32m        "@expo/config-types": "^52.0.4",[m
[32m+[m[32m        "@expo/json-file": "^9.0.2",[m
         "deepmerge": "^4.3.1",[m
         "getenv": "^1.0.0",[m
         "glob": "^10.4.2",[m
[36m@@ -2402,12 +2403,11 @@[m
       }[m
     },[m
     "node_modules/@expo/config-plugins": {[m
[31m-      "version": "9.0.14",[m
[31m-      "resolved": "https://registry.npmjs.org/@expo/config-plugins/-/config-plugins-9.0.14.tgz",[m
[31m-      "integrity": "sha512-Lx1ebV95rTFKKQmbu4wMPLz65rKn7mqSpfANdCx+KwRxuLY2JQls8V4h3lQjG6dW8NWf9qV5QaEFAgNB6VMyOQ==",[m
[31m-      "license": "MIT",[m
[32m+[m[32m      "version": "9.0.15",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@expo/config-plugins/-/config-plugins-9.0.15.tgz",[m
[32m+[m[32m      "integrity": "sha512-elKY/zIpAJ40RH26iwfyp+hwgeyPgIXX0SrCSOcjeJLsMsCmMac9ewvb+AN8y4k+N7m5lD/dMZupsaateKTFwA==",[m
       "dependencies": {[m
[31m-        "@expo/config-types": "^52.0.3",[m
[32m+[m[32m        "@expo/config-types": "^52.0.4",[m
         "@expo/json-file": "~9.0.1",[m
         "@expo/plist": "^0.2.1",[m
         "@expo/sdk-runtime-versions": "^1.0.0",[m
[36m@@ -2436,10 +2436,9 @@[m
       }[m
     },[m
     "node_modules/@expo/config-types": {[m
[31m-      "version": "52.0.3",[m
[31m-      "resolved": "https://registry.npmjs.org/@expo/config-types/-/config-types-52.0.3.tgz",[m
[31m-      "integrity": "sha512-muxvuARmbysH5OGaiBRlh1Y6vfdmL56JtpXxB+y2Hfhu0ezG1U4FjZYBIacthckZPvnDCcP3xIu1R+eTo7/QFA==",[m
[31m-      "license": "MIT"[m
[32m+[m[32m      "version": "52.0.4",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@expo/config-types/-/config-types-52.0.4.tgz",[m
[32m+[m[32m      "integrity": "sha512-oMGrb2o3niVCIfjnIHFrOoiDA9jGb0lc3G4RI1UiO//KjULBaQr3QTBoKDzZQwMqDV1AgYgSr9mgEcnX3LqhIg=="[m
     },[m
     "node_modules/@expo/config/node_modules/@babel/code-frame": {[m
       "version": "7.10.4",[m
[36m@@ -2613,10 +2612,9 @@[m
       }[m
     },[m
     "node_modules/@expo/json-file": {[m
[31m-      "version": "9.0.1",[m
[31m-      "resolved": "https://registry.npmjs.org/@expo/json-file/-/json-file-9.0.1.tgz",[m
[31m-      "integrity": "sha512-ZVPhbbEBEwafPCJ0+kI25O2Iivt3XKHEKAADCml1q2cmOIbQnKgLyn8DpOJXqWEyRQr/VWS+hflBh8DU2YFSqg==",[m
[31m-      "license": "MIT",[m
[32m+[m[32m      "version": "9.0.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@expo/json-file/-/json-file-9.0.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-yAznIUrybOIWp3Uax7yRflB0xsEpvIwIEqIjao9SGi2Gaa+N0OamWfe0fnXBSWF+2zzF4VvqwT4W5zwelchfgw==",[m
       "dependencies": {[m
         "@babel/code-frame": "~7.10.4",[m
         "json5": "^2.2.3",[m
[36m@@ -2920,6 +2918,11 @@[m
         "js-yaml": "bin/js-yaml.js"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/@ide/backoff": {[m
[32m+[m[32m      "version": "1.0.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@ide/backoff/-/backoff-1.0.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-F0YfUDjvT+Mtt/R4xdl2X0EYCHMMiJqNLdxHD++jDT5ydEFIyqbCHh51Qx2E211dgZprPKhV7sHmnXKpLuvc5g=="[m
[32m+[m[32m    },[m
     "node_modules/@isaacs/cliui": {[m
       "version": "8.0.2",[m
       "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",[m
[36m@@ -4991,6 +4994,18 @@[m
       "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",[m
       "license": "MIT"[m
     },[m
[32m+[m[32m    "node_modules/assert": {[m
[32m+[m[32m      "version": "2.1.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/assert/-/assert-2.1.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-eLHpSK/Y4nhMJ07gDaAzoX/XAKS8PSaojml3M0DM4JpV1LAi5JOJ/p6H/XWrl8L+DzVEvVCW1z3vWAaB9oTsQw==",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "call-bind": "^1.0.2",[m
[32m+[m[32m        "is-nan": "^1.3.2",[m
[32m+[m[32m        "object-is": "^1.1.5",[m
[32m+[m[32m        "object.assign": "^4.1.4",[m
[32m+[m[32m        "util": "^0.12.5"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/ast-types": {[m
       "version": "0.15.2",[m
       "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.15.2.tgz",[m
[36m@@ -5290,6 +5305,11 @@[m
         "@babel/core": "^7.0.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/badgin": {[m
[32m+[m[32m      "version": "1.2.3",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/badgin/-/badgin-1.2.3.tgz",[m
[32m+[m[32m      "integrity": "sha512-NQGA7LcfCpSzIbGRbkgjgdWkjy7HI+Th5VLxTJfW5EeaAf3fnS+xWQaQOCYiny+q6QSvxqoSO04vCx+4u++EJw=="[m
[32m+[m[32m    },[m
     "node_modules/balanced-match": {[m
       "version": "1.0.2",[m
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",[m
[36m@@ -6441,6 +6461,22 @@[m
         "node": ">=8"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/define-properties": {[m
[32m+[m[32m      "version": "1.2.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "define-data-property": "^1.0.1",[m
[32m+[m[32m        "has-property-descriptors": "^1.0.0",[m
[32m+[m[32m        "object-keys": "^1.1.1"[m
[32m+[m[32m      },[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">= 0.4"[m
[32m+[m[32m      },[m
[32m+[m[32m      "funding": {[m
[32m+[m[32m        "url": "https://github.com/sponsors/ljharb"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/del": {[m
       "version": "6.1.1",[m
       "resolved": "https://registry.npmjs.org/del/-/del-6.1.1.tgz",[m
[36m@@ -7135,6 +7171,14 @@[m
         }[m
       }[m
     },[m
[32m+[m[32m    "node_modules/expo-application": {[m
[32m+[m[32m      "version": "6.0.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/expo-application/-/expo-application-6.0.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-qcj6kGq3mc7x5yIb5KxESurFTJCoEKwNEL34RdPEvTB/xhl7SeVZlu05sZBqxB1V4Ryzq/LsCb7NHNfBbb3L7A==",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "expo": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/expo-asset": {[m
       "version": "11.0.2",[m
       "resolved": "https://registry.npmjs.org/expo-asset/-/expo-asset-11.0.2.tgz",[m
[36m@@ -7164,12 +7208,11 @@[m
       }[m
     },[m
     "node_modules/expo-constants": {[m
[31m-      "version": "17.0.4",[m
[31m-      "resolved": "https://registry.npmjs.org/expo-constants/-/expo-constants-17.0.4.tgz",[m
[31m-      "integrity": "sha512-5c0VlZycmDyQUCMCr3Na3cpHAsVJJ+5o6KkkD4rmATQZ0++Xp/S2gpnjWyEo2riRmO91vxoyHwmAySXuktJddQ==",[m
[31m-      "license": "MIT",[m
[32m+[m[32m      "version": "17.0.6",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/expo-constants/-/expo-constants-17.0.6.tgz",[m
[32m+[m[32m      "integrity": "sha512-rl3/hBIIkh4XDkCEMzGpmY6kWj2G1TA4Mq2joeyzoFBepJuGjqnGl7phf/71sTTgamQ1hmhKCLRNXMpRqzzqxw==",[m
       "dependencies": {[m
[31m-        "@expo/config": "~10.0.8",[m
[32m+[m[32m        "@expo/config": "~10.0.9",[m
         "@expo/env": "~0.4.1"[m
       },[m
       "peerDependencies": {[m
[36m@@ -7317,6 +7360,33 @@[m
         "invariant": "^2.2.4"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/expo-notifications": {[m
[32m+[m[32m      "version": "0.29.13",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/expo-notifications/-/expo-notifications-0.29.13.tgz",[m
[32m+[m[32m      "integrity": "sha512-GHye6XeI1uEeVttJO/hGwUyA5cgQsxR3mi5q37yOE7cZN3cMj36pIfEEmjXEr0nWIWSzoJ0w8c2QxNj5xfP1pA==",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "@expo/image-utils": "^0.6.4",[m
[32m+[m[32m        "@ide/backoff": "^1.0.0",[m
[32m+[m[32m        "abort-controller": "^3.0.0",[m
[32m+[m[32m        "assert": "^2.0.0",[m
[32m+[m[32m        "badgin": "^1.1.5",[m
[32m+[m[32m        "expo-application": "~6.0.2",[m
[32m+[m[32m        "expo-constants": "~17.0.5"[m
[32m+[m[32m      },[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "expo": "*",[m
[32m+[m[32m        "react": "*",[m
[32m+[m[32m        "react-native": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/expo-permissions": {[m
[32m+[m[32m      "version": "14.4.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/expo-permissions/-/expo-permissions-14.4.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-oAcnJ7dlZhpBydK73cwomA2xofizayVUz+FW5REl7dMu7MYyeN/3aqhlpZ3mYddrxvG161bqu97MQr01UixUnw==",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "expo": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/expo-router": {[m
       "version": "4.0.17",[m
       "resolved": "https://registry.npmjs.org/expo-router/-/expo-router-4.0.17.tgz",[m
[36m@@ -8611,6 +8681,21 @@[m
         "node": ">=0.10.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/is-nan": {[m
[32m+[m[32m      "version": "1.3.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/is-nan/-/is-nan-1.3.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-E+zBKpQ2t6MEo1VsonYmluk9NxGrbzpeeLC2xIViuO2EjU2xsXsBPwTr3Ykv9l08UYEVEdWeRZNouaZqF6RN0w==",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "call-bind": "^1.0.0",[m
[32m+[m[32m        "define-properties": "^1.1.3"[m
[32m+[m[32m      },[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">= 0.4"[m
[32m+[m[32m      },[m
[32m+[m[32m      "funding": {[m
[32m+[m[32m        "url": "https://github.com/sponsors/ljharb"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/is-number": {[m
       "version": "7.0.0",[m
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",[m
[36m@@ -11428,6 +11513,48 @@[m
         "node": ">=0.10.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/object-is": {[m
[32m+[m[32m      "version": "1.1.6",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.6.tgz",[m
[32m+[m[32m      "integrity": "sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "call-bind": "^1.0.7",[m
[32m+[m[32m        "define-properties": "^1.2.1"[m
[32m+[m[32m      },[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">= 0.4"[m
[32m+[m[32m      },[m
[32m+[m[32m      "funding": {[m
[32m+[m[32m        "url": "https://github.com/sponsors/ljharb"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/object-keys": {[m
[32m+[m[32m      "version": "1.1.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">= 0.4"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    "node_modules/object.assign": {[m
[32m+[m[32m      "version": "4.1.7",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",[m
[32m+[m[32m      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "call-bind": "^1.0.8",[m
[32m+[m[32m        "call-bound": "^1.0.3",[m
[32m+[m[32m        "define-properties": "^1.2.1",[m
[32m+[m[32m        "es-object-atoms": "^1.0.0",[m
[32m+[m[32m        "has-symbols": "^1.1.0",[m
[32m+[m[32m        "object-keys": "^1.1.1"[m
[32m+[m[32m      },[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">= 0.4"[m
[32m+[m[32m      },[m
[32m+[m[32m      "funding": {[m
[32m+[m[32m        "url": "https://github.com/sponsors/ljharb"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/on-finished": {[m
       "version": "2.3.0",[m
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",[m
[1mdiff --git a/frontend/package.json b/frontend/package.json[m
[1mindex f97f0b5..170a4f6 100644[m
[1m--- a/frontend/package.json[m
[1m+++ b/frontend/package.json[m
[36m@@ -28,6 +28,8 @@[m
     "expo-haptics": "~14.0.0",[m
     "expo-image": "~2.0.4",[m
     "expo-linking": "~7.0.3",[m
[32m+[m[32m    "expo-notifications": "^0.29.13",[m
[32m+[m[32m    "expo-permissions": "^14.4.0",[m
     "expo-router": "^4.0.17",[m
     "expo-splash-screen": "^0.29.21",[m
     "expo-status-bar": "~2.0.0",[m
